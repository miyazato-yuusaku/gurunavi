{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","items","item","rist","name0","link","name","name1","name2","name3","name4","apikey","e","index","target","dataset","optionIndex","data","this","areacode_s","searchData","setState","getJSON","uri","window","fetch","then","res","json","garea_small","params","rest","url","setData","handleUpdate","handleupdate","bind","React","Component","ListView","href","SelectorView","Autocomplete","options","getOptionLabel","option","areaname_s","renderInput","TextField","label","variant","style","width","fullWidth","onChange","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iUAKMA,E,YACJ,WAAaC,GAAQ,IAAD,8BAClB,4CAAMA,KACDC,MAAQ,CACXC,MAAO,GACPC,KAAM,GACNC,KAAM,CACJC,MAAO,CAAEC,KAAM,OAAQC,KAAM,IAC7BC,MAAO,CAAEF,KAAM,OAAQC,KAAM,IAC7BE,MAAO,CAAEH,KAAM,OAAQC,KAAM,IAC7BG,MAAO,CAAEJ,KAAM,OAAQC,KAAM,IAC7BI,MAAO,CAAEL,KAAM,OAAQC,KAAM,MAGjC,EAAKK,OAAS,mCAbI,E,0EAgBNC,GACZ,IAAMC,EAAQD,EAAEE,OAAOC,QAAQC,YACzBC,EAAOC,KAAKlB,MAAMC,MAAMY,GAAOM,WACrCD,KAAKE,aACLF,KAAKG,SAAS,CAAEnB,KAAMe,M,2JAIhBK,EAAU,SAAAC,GAAG,OACjBC,OACGC,MAAMF,GACNG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GAAI,OAAIA,EAAKC,gBACX,0DACNC,E,gBAAkBZ,KAAKP,O,qBACVW,EAFP,0DAEqBQ,G,OAA3Bb,E,OACNC,KAAKG,SAAS,CAAEpB,MAAOgB,I,oQAIjBK,EAAU,SAAAC,GAAG,OACjBC,OACGC,MAAMF,GACNG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GAAI,OAAIA,EAAKG,QAClBL,MAAK,SAAAE,GAAI,MAAK,CACbxB,MAAO,CAAEC,KAAMuB,EAAK,GAAGI,IAAK1B,KAAMsB,EAAK,GAAGtB,MAC1CC,MAAO,CAAEF,KAAMuB,EAAK,GAAGI,IAAK1B,KAAMsB,EAAK,GAAGtB,MAC1CE,MAAO,CAAEH,KAAMuB,EAAK,GAAGI,IAAK1B,KAAMsB,EAAK,GAAGtB,MAC1CG,MAAO,CAAEJ,KAAMuB,EAAK,GAAGI,IAAK1B,KAAMsB,EAAK,GAAGtB,MAC1CI,MAAO,CAAEL,KAAMuB,EAAK,GAAGI,IAAK1B,KAAMsB,EAAK,GAAGtB,WAGpC,6CACNwB,E,gBAAkBZ,KAAKP,O,uBAAqBO,KAAKlB,MAAME,M,SAC1CoB,EAFP,6CAEqBQ,G,OAA3Bb,E,OACNC,KAAKG,SAAS,CAAElB,KAAMc,I,gJAItBC,KAAKe,Y,+BAIL,OACE,6BACE,wDACA,4BACE,kBAAC,EAAD,CACEhB,KAAMC,KAAKlB,MAAMC,MACjBiC,aAAchB,KAAKiB,aAAaC,KAAKlB,QAEvC,kBAAC,EAAD,CAAUf,KAAMe,KAAKlB,MAAMG,a,GArEnBkC,IAAMC,WA4ElBC,EAAW,SAAAxC,GACf,IAAMkB,EAAOlB,EAAMI,KACnB,OACE,4BACE,4BACE,uBAAGqC,KAAMvB,EAAKb,MAAMC,MAAOY,EAAKb,MAAME,OAExC,4BACE,uBAAGkC,KAAMvB,EAAKV,MAAMF,MAAOY,EAAKV,MAAMD,OAExC,4BACE,uBAAGkC,KAAMvB,EAAKT,MAAMH,MAAOY,EAAKT,MAAMF,OAExC,4BACE,uBAAGkC,KAAMvB,EAAKR,MAAMJ,MAAOY,EAAKR,MAAMH,OAExC,4BACE,uBAAGkC,KAAMvB,EAAKP,MAAML,MAAOY,EAAKP,MAAMJ,SAMxCmC,EAAe,SAAA1C,GAAK,OACxB,kBAAC2C,EAAA,EAAD,CACEC,QAAS5C,EAAMkB,KACf2B,eAAgB,SAAAC,GAAM,OAAIA,EAAOC,YACjCC,YAAa,SAAAjB,GAAM,OACjB,kBAACkB,EAAA,EAAD,iBACMlB,EADN,CAEEmB,MAAM,oBACNC,QAAQ,WACRC,MAAO,CAAEC,MAAO,KAChBC,WAAS,MAGbC,SAAUvD,EAAMmC,gBAILpC,IC7GKyD,QACW,cAA7B/B,OAAOgC,SAASC,UAEe,UAA7BjC,OAAOgC,SAASC,UAEhBjC,OAAOgC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.427b4228.chunk.js","sourcesContent":["import React from 'react'\nimport './App.css'\nimport { TextField } from '@material-ui/core'\nimport Autocomplete from '@material-ui/lab/Autocomplete'\n\nclass App extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      items: {},\n      item: '',\n      rist: {\n        name0: { link: 'link', name: '' },\n        name1: { link: 'link', name: '' },\n        name2: { link: 'link', name: '' },\n        name3: { link: 'link', name: '' },\n        name4: { link: 'link', name: '' }\n      }\n    }\n    this.apikey = 'd44820a99e565793f96bb49913a3135f'\n  }\n\n  handleupdate (e) {\n    const index = e.target.dataset.optionIndex\n    const data = this.state.items[index].areacode_s\n    this.searchData()\n    this.setState({ item: data })\n  }\n\n  async setData () {\n    const getJSON = uri =>\n      window\n        .fetch(uri)\n        .then(res => res.json())\n        .then(json => json.garea_small)\n    const uri = 'https://api.gnavi.co.jp/master/GAreaSmallSearchAPI/v3/?'\n    const params = `keyid=${this.apikey}&lang=ja`\n    const data = await getJSON(uri + params)\n    this.setState({ items: data })\n  }\n\n  async searchData () {\n    const getJSON = uri =>\n      window\n        .fetch(uri)\n        .then(res => res.json())\n        .then(json => json.rest)\n        .then(json => ({\n          name0: { link: json[0].url, name: json[0].name },\n          name1: { link: json[1].url, name: json[1].name },\n          name2: { link: json[2].url, name: json[2].name },\n          name3: { link: json[3].url, name: json[3].name },\n          name4: { link: json[4].url, name: json[4].name }\n        }))\n\n    const uri = 'https://api.gnavi.co.jp/RestSearchAPI/v3/?'\n    const params = `keyid=${this.apikey}&areacode_s=${this.state.item}`\n    const data = await getJSON(uri + params)\n    this.setState({ rist: data })\n  }\n\n  componentDidMount () {\n    this.setData()\n  }\n\n  render () {\n    return (\n      <div>\n        <h1>ぐるなび</h1>\n        <h2>\n          <SelectorView\n            data={this.state.items}\n            handleUpdate={this.handleupdate.bind(this)}\n          />\n          <ListView rist={this.state.rist} />\n        </h2>\n      </div>\n    )\n  }\n}\n\nconst ListView = props => {\n  const data = props.rist\n  return (\n    <ul>\n      <li>\n        <a href={data.name0.link}>{data.name0.name}</a>\n      </li>\n      <li>\n        <a href={data.name1.link}>{data.name1.name}</a>\n      </li>\n      <li>\n        <a href={data.name2.link}>{data.name2.name}</a>\n      </li>\n      <li>\n        <a href={data.name3.link}>{data.name3.name}</a>\n      </li>\n      <li>\n        <a href={data.name4.link}>{data.name4.name}</a>\n      </li>\n    </ul>\n  )\n}\n\nconst SelectorView = props => (\n  <Autocomplete\n    options={props.data}\n    getOptionLabel={option => option.areaname_s}\n    renderInput={params => (\n      <TextField\n        {...params}\n        label='Choose a location'\n        variant='outlined'\n        style={{ width: 300 }}\n        fullWidth\n      />\n    )}\n    onChange={props.handleUpdate}\n  />\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}